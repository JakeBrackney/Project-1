{"version":3,"sources":["../js/script.js"],"names":["towerOne","document","querySelector","towerTwo","towerThree","discOne","createElement","discTwo","discThree","discFour","className","id","readyToMove","currentDisc","onGameStart","appendChild","reset","addEventListener","location","reload","pickDisc","disc","querySelectorAll","style","background","unpickDisc","moveDisc","insertBefore","children","checkForWin","childElementCount","length","alert","parentElement","clientWidth"],"mappings":";AAAA,IAAIA,EAAWC,SAASC,cAAc,aAClCC,EAAWF,SAASC,cAAc,aAClCE,EAAaH,SAASC,cAAc,eAEpCG,EAAUJ,SAASK,cAAc,OACjCC,EAAUN,SAASK,cAAc,OACjCE,EAAYP,SAASK,cAAc,OACnCG,EAAWR,SAASK,cAAc,OACtCD,EAAQK,UAAY,QACpBH,EAAQG,UAAY,QACpBF,EAAUE,UAAY,QACtBD,EAASC,UAAY,QACrBL,EAAQM,GAAK,UACbJ,EAAQI,GAAK,UACbH,EAAUG,GAAK,YACfF,EAASE,GAAK,WAEd,IAAIC,GAAc,EACdC,EAAc,GAElB,SAASC,IACRd,EAASe,YAAYV,GACrBL,EAASe,YAAYR,GACrBP,EAASe,YAAYP,GACrBR,EAASe,YAAYN,GAGtBK,IAGA,IAAIE,EAAQf,SAASC,cAAc,UACnCc,EAAMC,iBAAiB,QAAS,WAAMC,OAAAA,SAASC,QAAO,KAGtD,IAAIC,EAAW,SAASC,IACvBR,EAAcQ,EAAKC,iBAAiB,UAAU,IAClCC,MAAMC,WAAa,mLAC/BZ,GAAc,GAIXa,EAAa,WAChBZ,EAAYU,MAAMC,WAAa,sLAC/BX,EAAc,GACdD,GAAc,GAIXc,EAAW,SAASL,GACvBA,EAAKM,aAAad,EAAaQ,EAAKO,SAAS,IAC7Cf,EAAYU,MAAMC,WAAa,sLAC/BX,EAAc,GACdD,GAAc,GAIXiB,EAAc,WACbzB,EAAW0B,oBAAsB7B,SAASqB,iBAAiB,UAAUS,QACxEC,MAAM,6BAKRhC,EAASiB,iBAAiB,QAAS,WAC9BjB,EAASsB,iBAAiB,UAAUS,OAAS,IAAqB,IAAhBnB,EACrDQ,EAASpB,IACiB,IAAhBY,GAAyD,aAAjCC,EAAYoB,cAActB,GAC5Dc,KAC0B,IAAhBb,GAAuD,IAA/BZ,EAAS8B,kBAC3CJ,EAAS1B,IACkB,IAAhBY,GAA0BC,EAAYqB,YAAclC,EAAS4B,SAAS,GAAGM,aACpFR,EAAS1B,KAKXG,EAASc,iBAAiB,QAAS,WAC9Bd,EAASmB,iBAAiB,UAAUS,OAAS,IAAqB,IAAhBnB,EACrDQ,EAASjB,IACiB,IAAhBS,GAAyD,aAAjCC,EAAYoB,cAActB,GAC5Dc,KAC0B,IAAhBb,GAAuD,IAA/BT,EAAS2B,kBAC3CJ,EAASvB,IACkB,IAAhBS,GAA0BC,EAAYqB,YAAc/B,EAASyB,SAAS,GAAGM,aACpFR,EAASvB,KAKXC,EAAWa,iBAAiB,QAAS,WAChCb,EAAWkB,iBAAiB,UAAUS,OAAS,IAAqB,IAAhBnB,EACvDQ,EAAShB,IACiB,IAAhBQ,GAAyD,eAAjCC,EAAYoB,cAActB,GAC5Dc,KAC0B,IAAhBb,GAAyD,IAAjCR,EAAW0B,kBAC7CJ,EAAStB,IACkB,IAAhBQ,GAA0BC,EAAYqB,YAAc9B,EAAWwB,SAAS,GAAGM,aACtFR,EAAStB,GAEVyB","file":"script.6c66e601.map","sourceRoot":"../src/pug","sourcesContent":["let towerOne = document.querySelector('#towerOne')\nlet towerTwo = document.querySelector('#towerTwo')\nlet towerThree = document.querySelector('#towerThree')\n\nlet discOne = document.createElement('div')\nlet discTwo = document.createElement('div')\nlet discThree = document.createElement('div')\nlet discFour = document.createElement('div')\ndiscOne.className = 'discs'\ndiscTwo.className = 'discs'\ndiscThree.className = 'discs'\ndiscFour.className = 'discs'\ndiscOne.id = 'discOne'\ndiscTwo.id = 'discTwo' \ndiscThree.id = 'discThree'\ndiscFour.id = 'discFour'\n\nlet readyToMove = false; // given to me by Jimmy, to operate as a switch\nlet currentDisc = \"\"\n\nfunction onGameStart() {\n\ttowerOne.appendChild(discOne)\n\ttowerOne.appendChild(discTwo)\n\ttowerOne.appendChild(discThree)\n\ttowerOne.appendChild(discFour)\n}\n\nonGameStart()\n\n//game reset button - refreshes page -- https://developer.mozilla.org/en-US/docs/Web/API/Location/reload\nlet reset = document.querySelector('.reset')\nreset.addEventListener('click', () => location.reload(true))\n\n// Selects the top disc on whichever tower\nlet pickDisc = function(disc) {\n\tcurrentDisc = disc.querySelectorAll('.discs')[0] // [0] selects the index of the child element within the parent\n\tcurrentDisc.style.background = 'linear-gradient(to right, rgb(104, 68, 68), rgb(133, 133, 133), rgb(225, 225, 225), rgb(74, 26, 26), rgb(111, 43, 43), rgb(137, 84, 84), rgb(255, 255, 255), rgb(169, 169, 169))'\n\treadyToMove = true\n}\n\n// deselects a disc if you choose not to move it\nlet unpickDisc = function() {\n\tcurrentDisc.style.background = 'linear-gradient(to right, rgb(83, 91, 92), rgb(133, 133, 133), rgb(225, 225, 225), rgb(72, 77, 91), rgb(100, 101, 110), rgb(138, 132, 132), rgb(255, 255, 255), rgb(169, 169, 169))'\n\tcurrentDisc = \"\"\n\treadyToMove = false\n}\n\n//moves disc to target tower\nlet moveDisc = function(disc) {\n\tdisc.insertBefore(currentDisc, disc.children[0])\n\tcurrentDisc.style.background = 'linear-gradient(to right, rgb(83, 91, 92), rgb(133, 133, 133), rgb(225, 225, 225), rgb(72, 77, 91), rgb(100, 101, 110), rgb(138, 132, 132), rgb(255, 255, 255), rgb(169, 169, 169))'\n\tcurrentDisc = \"\"\n\treadyToMove = false\n}\n\n// see if all discs are on Tower Three\nlet checkForWin = function() {\n\tif (towerThree.childElementCount === document.querySelectorAll('.discs').length) {\n\t\talert('You got it! ( ͡° ͜ʖ ͡° )')\n\t}\n}\n\n// function for evaluating movement and legal moves for towerOne\ntowerOne.addEventListener('click', function() {\n\tif (towerOne.querySelectorAll('.discs').length > 0 && readyToMove === false) {\n\t\tpickDisc(towerOne)\n\t} else if (readyToMove === true && currentDisc.parentElement.id === 'towerOne') {\n\t\tunpickDisc()\n\t} else if (readyToMove === true && towerOne.childElementCount === 0) { // allows a disc to be placed on an empty tower\n\t\tmoveDisc(towerOne)\n\t} else if ((readyToMove === true) && (currentDisc.clientWidth < towerOne.children[0].clientWidth)) { // clientWidth accesses the width set in css for each child\n\t\tmoveDisc(towerOne)\n\t}\n})\n\n// function for evaluating movement and legal moves for towerTwo\ntowerTwo.addEventListener('click', function() {\n\tif (towerTwo.querySelectorAll('.discs').length > 0 && readyToMove === false) {\n\t\tpickDisc(towerTwo)\n\t} else if (readyToMove === true && currentDisc.parentElement.id === 'towerTwo') {\n\t\tunpickDisc()\n\t} else if (readyToMove === true && towerTwo.childElementCount === 0) {\n\t\tmoveDisc(towerTwo)\n\t} else if ((readyToMove === true) && (currentDisc.clientWidth < towerTwo.children[0].clientWidth)) { \n\t\tmoveDisc(towerTwo)\n\t} \n})\n\n// function for evaluating movement and legal moves for towerThree\ntowerThree.addEventListener('click', function() {\n\tif (towerThree.querySelectorAll('.discs').length > 0 && readyToMove === false) {\n\t\tpickDisc(towerThree)\n\t} else if (readyToMove === true && currentDisc.parentElement.id === 'towerThree') {\n\t\tunpickDisc()\n\t} else if (readyToMove === true && towerThree.childElementCount === 0) {\n\t\tmoveDisc(towerThree)\n\t} else if ((readyToMove === true) && (currentDisc.clientWidth < towerThree.children[0].clientWidth)) {\n\t\tmoveDisc(towerThree)\n\t}\n\tcheckForWin()\n})\n\n\n\n\n"]}